/** This file provides examples and explanations for styles. */

/** 
 * This is how add style to a child class.
 * Note that if you use native tags, you should not add "." in front of the className. 
 */
.main {
  .child {
    display: flex;
  }
  h1 {
    display: flex;
  }
}

/** 
 * This is how you extend a className: here you can add style to className="main extension", 
 * className="mainextension2" and className="main--extension3".
 */
.main {
  &.extension {
    display: flex;
  }
  &extension2 {
    display: flex;
  }
  &--extension3 {
    display: flex;
  }
}

/** 
 * To define different themes, you should create a container with a className linked to the theme selected.
 * Then define a value for each color for each theme, import all the files in a single one before declaring them as variables.
 */
/** Dark Theme file. */
.dark--theme {
  --light-color-primary: #2f3032;
  --regular-color-primary: #171a21;
  --bright-color-primary: #0a1120;
  --dark-color-primary: #010204;
}
/** Use variables in child components: */
.main {
  color: var(--light-color-primary);
}

/** To define importable variables, define variables with @: */
@light-color-primary: #000000;
/** Import the file with @import "pathToColors"; then use it with: */
.main {
  color: @light-color-primary;
}

/** Border Style. */
.main {
  // border: defines a border with size then type then color.
  border: 2px solid #000000;
  // border-radius: rounds the edges by the size.
  border-radius: 0.5rem;
}

/** Text Style. */
.main {
  // color: defines text color.
  color: 2px solid #000000;
  // font-size: defines font size.
  font-size: 0.5rem;
  // text-align: defines text alignment type.
  text-align: center;
  // text-decoration: defines text decoration.
  text-decoration: underline;
  // white-space: defines whitespaces and line breaks, nowrap prevents automatic line breaks.
  white-space: nowrap;
}

/** Content Style. */
.main {
  // displays each element as a line, helpful to adapt container to content size while maintaining a list.
  display: inline-block;
  // displays the content flexibly according to the size needed, helpful to adapt container to content size.
  display: flex;
  // set the flex direction, column means that child elements form a column.
  flex-direction: column;
  // specifies how much a element can expand relative to other elements.
  flex-grow: 1;
  // specifies how much a element can expend in width, useful with previous style.
  max-width: 25%;
  // specifies how much a element should expend in height, 100vh means at least all visible screen.
  min-height: 100vh;
  // specifies how child elements should be aligned, stretch makes them all have the same height.
  align-items: stretch;
  // justify content: justifies child elements content.
  justify-content: center;
  // padding all directions 3rem, inside the border.
  padding: 3rem;
  // padding top/bot 1rem and left/right 3rem.
  padding: 1rem 3rem;
  // padding top 1rem, right 3rem, bot 5rem and left 7rem.
  padding: 1rem 3rem 5rem 7rem;
  // margin: outside the border.
  margin: 3rem;
}

/** Most classic examples. */

// center a div both horizontally and vertically
main {
  // position relative to parent element
  position: relative;
  // this place the div just below the middle
  top: 50%;
  // this transform the div so that half is above the the position Y, half below the position Y, with the previous style, it centers the div inside its parent element.
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
}

// center div horizontally
main {
  justify-content: center;
}

// center text horizontally
main {
  text-align: center;
}

// force the text to write on one line
main {
  white-space: nowrap;
}

// trace a line transition when hovering over a text, we use the ::after
a::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: black;
  transform: scaleX(0);
  -webkit-transition: scaleX(0);
  -moz-transition: scaleX(0);
  transform-origin: bottom right;
  transition: transform 0.5s ease-out;
}
// and this is needed too:
a:hover::after {
  transform: scaleX(1);
  -webkit-transition: scaleX(1);
  -moz-transition: scaleX(1);
  transform-origin: bottom left;
}
